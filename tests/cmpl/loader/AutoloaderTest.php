<?php
namespace cmpl\loader;

require_once 'PHPUnit/Framework.php';


/**
 * Test class for Autoloader.
 * Generated by PHPUnit on 2010-06-14 at 09:14:12.
 */
class AutoloaderTest extends \PHPUnit_Framework_TestCase
{
    public function testRegisterNamespace()
    {
        $loader = new Autoloader();

        $this->assertEquals($loader, $loader->registerNamespace('foo', '/path/to'));
        $this->assertEquals('/path/to', $loader->getPath('foo'));

        try
        {
            $loader->getPath('foobar');
            $this->fail('->registerNamespace() throws an \InvalidArgumentException if the namespace prefix does not exists');
        }
        catch (\Exception $e)
        {
            $this->assertTrue($e instanceof \InvalidArgumentException);
        }
    }

    public function testLoadClass()
    {
        $fixturePath = realpath(__DIR__ . '/../../fixtures/cmpl/loader');


        $loader = new Autoloader();
        $loader->registerNamespace('foo', $fixturePath);

        $result = !class_exists('foo\Bar', false) && $loader->loadClass('foo\Bar') && class_exists('foo\Bar', false);
        $this->assertTrue($result, '->loadClass() Class load success');


        $loader = new Autoloader();
        $loader->registerNamespace('foo_bar', $fixturePath);

        $result = !class_exists('foo_bar\Baz', false) && $loader->loadClass('foo_bar\Baz') && class_exists('foo_bar\Baz', false);
        $this->assertTrue($result, '->loadClass() Class load success');
    }

    public function testRegister()
    {
        $loader = new Autoloader();
        $loader->register();

        foreach (spl_autoload_functions() as $callback)
        {
            if (is_array($callback) && $loader === $callback[0] && 'loadClass' === $callback[1])
            {
                $this->assertTrue(true, 'Autoloader registered');
                $loader->unregister();
                return;
            }
        }

        $this->assertTrue(false, 'Autoloader not registered');
    }

    public function testUnegister()
    {
        $loader = new Autoloader();
        $loader->register();
        $loader->unregister();

        foreach (spl_autoload_functions() as $callback)
        {
            if (is_array($callback) && $loader === $callback[0] && 'loadClass' === $callback[1])
            {
                $this->assertTrue(false, 'Autoloader unregister faild');
                return;
            }
        }

        $this->assertTrue(true, 'Autoloader unregistered');
    }
}

class LoaderTest
{
}