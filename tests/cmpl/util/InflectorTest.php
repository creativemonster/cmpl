<?php
namespace cmpl\util;

require_once 'PHPUnit/Framework.php';


/**
 * Test class for Inflector.
 * Generated by PHPUnit on 2010-06-13 at 14:42:44.
 */
class InflectorTest extends \PHPUnit_Framework_TestCase
{
    protected function tearDown()
    {
        Inflector::reset();
    }

    public function provideToUnderscore()
    {
        return array(
            array('FooBarBaz',           'foo_bar_baz'),
            array('API',                 'api'),
            array('AWSECommerceService', 'awse_commerce_service')
        );
    }

    /**
     * @dataProvider provideToUnderscore
     */
    public function testUnderscore($from, $to)
    {
        $this->assertEquals($to, Inflector::underscore($from));
    }

    public function provideToCamelize()
    {
        return array(
            array('foo_bar_baz', 'FooBarBaz'),
            array('foo\bar\Baz', 'FooBarBaz')
        );
    }

    /**
     * @dataProvider provideToCamelize
     */
    public function testCamelize($from, $to)
    {
        $this->assertEquals($to, Inflector::camelize($from));
    }

    public function provideToTableize()
    {
        return array(
            array('AWSECommerceService', 'awse_commerce_services'),
            array('BlogPost',            'blog_posts')
        );
    }

    /**
     * @dataProvider provideToTableize
     */
    public function testTableize($from, $to)
    {
        $this->assertEquals($to, Inflector::tableize($from));
    }

    public function provideToClassify()
    {
        return array(
            array('table_names', 'TableName'),
            array('accessories', 'Accessory')
        );
    }

    /**
     * @dataProvider provideToClassify
     */
    public function testClassify($from, $to)
    {
        $this->assertEquals($to, Inflector::classify($from));
    }

    public function provideToPluralize()
    {
        return array(
            array('child', 'children'),
            array('Person', 'People'),
            array('Series', 'Series'),
            array('Accessory', 'Accessories'),
            array('entity', 'entities'),
            array('box', 'boxes'),
            array('class', 'classes'),
            array('glasses', 'glasses')
        );
    }

    /**
     * @dataProvider provideToPluralize
     */
    public function testPluralize($from, $to)
    {
        $this->assertEquals($to, Inflector::pluralize($from));
    }

    public function provideToSingularize()
    {
        return array(
            array('Children', 'Child'),
            array('people', 'person'),
            array('Series', 'Series'),
            array('Accessories', 'Accessory'),
            array('entities', 'entity'),
            array('boxes', 'box'),
            array('classes', 'class'),
            array('glass', 'glass')
        );
    }

    /**
     * @dataProvider provideToSingularize
     */
    public function testSingularize($from, $to)
    {
        $this->assertEquals($to, Inflector::singularize($from));
    }

    /**
     * @todo Implement testSluggify().
     */
    public function testSluggify()
    {
        $this->assertEquals('blog-article-no-1', Inflector::sluggify('Blog Article No.1'));
    }

    /**
     * @todo Implement testUrlize().
     */
    public function testUrlize()
    {
        $this->assertEquals('BLOG記事-20100613', Inflector::urlize(' 　BLOG記事 20100613 '));
    }

    /**
     * @todo Implement testHumanize().
     */
    public function testHumanize()
    {
        $this->assertEquals('Foo Bar Baz', Inflector::humanize('foo_bar_baz'));
    }

    public function testSearchable()
    {
        $this->assertEquals('foo bar baz', Inflector::searchable('   foo   bar    BAZ  '));
    }
}
